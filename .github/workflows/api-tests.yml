name: Build and test
permissions:
  contents: read
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 10 * * 1' # run "At 10:00 on Monday"

jobs:
  api-tests:
    name: Run api tests
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
      volumes:
        - ${{ github.workspace }}:/go/src/github.com/cliveyg/poptape-admin
    defaults:
      run:
        working-directory: /go/src/github.com/cliveyg/poptape-admin
    services:
      ##########################################
      #  set up databases and localstack       #
      ##########################################
      pdb:
        image: postgres
        env:
          POSTGRES_DB: poptape_admin_test
          POSTGRES_PASSWORD: "${{ secrets.POSTGRES_TESTDB_PASSWORD }}"
          POSTGRES_USER: poptape_admin_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mdb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: poptape_admin_backups_test
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_TESTDB_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE: poptape_admin_backups_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20
        env:
          SERVICES: s3,iam # Add more services as needed
          DEBUG: 1

    env:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_REGION: us-east-1
      AWS_ENDPOINT_URL: http://localstack:4566

    steps:
      ##########################################
      #  check out and build go binary         #
      ##########################################
      - name: Install ca certs dependency
        run: |
          apt-get update && apt-get install --yes --no-install-recommends ca-certificates

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Install Go dependencies
        run: |
          go mod tidy

      - name: Install SQLite build deps
        run: |
          apt-get update && apt-get install --yes --no-install-recommends build-essential libsqlite3-dev

      # Sanity check build for prod container
      - name: Run go build (CGO disabled for production binary)
        env:
          CGO_ENABLED: 0
        run: go build -o /dev/null ./...

      - name: Create .env file from github secrets
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Copy .env into all package directories
        run: |
          find . -type d -exec cp .env {}/.env \;

      - name: Install bc
        run: apt-get update && apt-get install --yes --no-install-recommends bc

      - name: Install gcov2lcov
        run: go install github.com/jandelgado/gcov2lcov@latest

      ##########################################
      #  tests                                 #
      ##########################################

      - name: Set unit, integration and total test flags
        run: |
          echo "RUN_UNIT_TESTS=false" >> $GITHUB_ENV
          echo "RUN_INT_TESTS=false" >> $GITHUB_ENV
          echo "RUN_TOTAL_TESTS=true" >> $GITHUB_ENV
          touch poptape_admin.log

      ##########################################
      # unit tests                             #
      ##########################################

      - name: Run unit tests and generate test coverage file (excluding tests and testutils from coverage report)
        if: env.RUN_UNIT_TESTS == 'true'
        run: |
          set -e
          set -o pipefail
          go test -v ./tests/unit -cover -coverpkg=./... -coverprofile=unit.cover.out | tee unit.test.out
          grep -v '/tests/' unit.cover.out | grep -v '/testutils/' > unit.cover.out.filtered
          mv unit.cover.out.filtered unit.cover.out
        shell: bash

      - name: Check unit test coverage is above threshold
        if: env.RUN_UNIT_TESTS == 'true'
        env:
          UNIT_TESTCOVERAGE_THRESHOLD: 0
        run: |
          echo "Checking unit test coverage is above threshold..."
          echo "Threshold             : $UNIT_TESTCOVERAGE_THRESHOLD %"
          unitTotalCoverage=$(go tool cover -func=unit.cover.out | awk '/^total:/ {gsub("%","",$3); print $3}')
          echo "Current unit test coverage : $unitTotalCoverage %"
          echo "-----------------------------------------------------------"
          if [ "$(echo "$unitTotalCoverage >= $UNIT_TESTCOVERAGE_THRESHOLD" | bc -l)" -eq 1 ]; then
            echo "Unit test coverage passed threshold OK"
          else
            echo "Current unit test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
            echo "Failed"
            exit 1
          fi
          echo "-----------------------------------------------------------"
        shell: bash

      - name: Show unit test coverage summary
        if: env.RUN_UNIT_TESTS == 'true'
        run: go tool cover -func=unit.cover.out

      - name: Generate Unit Test HTML coverage report
        if: env.RUN_UNIT_TESTS == 'true'
        run: |
          go tool cover -html=unit.cover.out -o unit.coverage.html

      - name: Upload Unit Test HTML coverage report
        if: env.RUN_UNIT_TESTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage-report
          path: unit.coverage.html

      - name: Convert Go unit.cover.out to lcov
        if: env.RUN_UNIT_TESTS == 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          gcov2lcov -infile unit.cover.out -outfile unit.coverage.lcov

      - name: Prepare unit files for badge
        if: env.RUN_UNIT_TESTS == 'true'
        run: |
          cp unit.coverage.lcov lcov.info
          cp unit.test.out test.out

      - name: Unit Coverage & Test Badges
        if: env.RUN_UNIT_TESTS == 'true'
        uses: gaelgirodon/ci-badges-action@v1
        with:
          gist-id: ${{ secrets.UNIT_TEST_GIST_ID }}
          token: ${{ secrets.GIST_TOKEN }}
          prefix: unit

      ##########################################
      # integration tests                      #
      ##########################################

      - name: Run integration tests and generate test coverage file (excluding tests and testutils from coverage report)
        if: env.RUN_INT_TESTS == 'true'
        run: |
          set -e
          set -o pipefail
          go test -v ./tests/integration -cover -coverpkg=./... -coverprofile=int.cover.out | tee int.test.out
          # go test -v -cover -coverprofile=int.cover.out ./tests/integration -run '^TestRestoreBySaveID' | tee int.test.out
          grep -v '/tests/' int.cover.out | grep -v '/testutils/' > int.cover.out.filtered
          mv int.cover.out.filtered int.cover.out
        shell: bash

      - name: Check integration test coverage is above threshold
        if: env.RUN_INT_TESTS == 'true'
        env:
          INT_TESTCOVERAGE_THRESHOLD: 0
        run: |
          echo "Checking integration test coverage is above threshold..."
          echo "Threshold             : $INT_TESTCOVERAGE_THRESHOLD %"
          intTotalCoverage=$(go tool cover -func=int.cover.out | awk '/^total:/ {gsub("%","",$3); print $3}')
          echo "Current integration test coverage : $intTotalCoverage %"
          echo "-----------------------------------------------------------"
          if [ "$(echo "$intTotalCoverage >= $INT_TESTCOVERAGE_THRESHOLD" | bc -l)" -eq 1 ]; then
            echo "Integration test coverage passed threshold OK"
          else
            echo "Current integration test coverage is below threshold. Please add more integration tests or adjust threshold to a lower value."
            echo "Failed"
            exit 1
          fi
          echo "-----------------------------------------------------------"
        shell: bash

      - name: Show integration test coverage summary
        if: env.RUN_INT_TESTS == 'true'
        run: go tool cover -func=int.cover.out

      - name: Generate Integration HTML coverage report
        if: env.RUN_INT_TESTS == 'true'
        run: |
          go tool cover -html=int.cover.out -o int.coverage.html

      - name: Upload Integration Tests HTML coverage report
        if: env.RUN_INT_TESTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: int-test-coverage-report
          path: int.coverage.html

      - name: Convert Go int.cover.out to lcov
        if: env.RUN_INT_TESTS == 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          gcov2lcov -infile int.cover.out -outfile int.coverage.lcov

      - name: Prepare int files for badge
        if: env.RUN_INT_TESTS == 'true'
        run: |
          cp int.coverage.lcov lcov.info
          cp int.test.out test.out

      - name: Integration Coverage & Test Badges
        if: env.RUN_INT_TESTS == 'true'
        uses: gaelgirodon/ci-badges-action@v1
        with:
          gist-id: ${{ secrets.INT_TEST_GIST_ID }}
          token: ${{ secrets.GIST_TOKEN }}
          prefix: int

      ##########################################
      # Total tests                            #
      ##########################################

      - name: Run all tests and generate test coverage file (excluding tests and testutils from coverage report)
        if: env.RUN_TOTAL_TESTS == 'true'
        run: |
          set -e
          set -o pipefail
          go test -v ./tests/... -cover -coverpkg=./... -coverprofile=total.cover.out | tee total.test.out
          grep -v '/tests/' total.cover.out | grep -v '/testutils/' > total.cover.out.filtered
          mv total.cover.out.filtered total.cover.out
        shell: bash

      - name: Check total test coverage is above threshold
        if: env.RUN_TOTAL_TESTS == 'true'
        env:
          TOTAL_TESTCOVERAGE_THRESHOLD: 0
        run: |
          echo "Checking total test coverage is above threshold..."
          echo "Threshold             : $TOTAL_TESTCOVERAGE_THRESHOLD %"
          totalTotalCoverage=$(go tool cover -func=total.cover.out | awk '/^total:/ {gsub("%","",$3); print $3}')
          echo "Current total test coverage : $totalTotalCoverage %"
          echo "-----------------------------------------------------------"
          if [ "$(echo "$totalTotalCoverage >= $TOTAL_TESTCOVERAGE_THRESHOLD" | bc -l)" -eq 1 ]; then
            echo "Total test coverage passed threshold OK"
          else
            echo "Current total test coverage is below threshold. Please add more tests or adjust threshold to a lower value."
            echo "Failed"
            exit 1
          fi
          echo "-----------------------------------------------------------"
        shell: bash

      - name: Show total test coverage summary
        if: env.RUN_TOTAL_TESTS == 'true'
        run: go tool cover -func=total.cover.out

      - name: Generate Total HTML coverage report
        if: env.RUN_TOTAL_TESTS == 'true'
        run: |
          go tool cover -html=total.cover.out -o total.coverage.html

      - name: Upload Total Tests HTML coverage report
        if: env.RUN_TOTAL_TESTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: total-test-coverage-report
          path: total.coverage.html

      - name: Convert Go total.cover.out to lcov
        if: env.RUN_TOTAL_TESTS == 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          gcov2lcov -infile total.cover.out -outfile total.coverage.lcov

      - name: Prepare total files for badge
        if: env.RUN_TOTAL_TESTS == 'true'
        run: |
          cp total.coverage.lcov lcov.info
          cp total.test.out test.out

      - name: Total Coverage & Test Badges
        if: env.RUN_TOTAL_TESTS == 'true'
        uses: gaelgirodon/ci-badges-action@v1
        with:
          gist-id: ${{ secrets.TOTAL_TEST_GIST_ID }}
          token: ${{ secrets.GIST_TOKEN }}
          prefix: total